# <type>(<scope>): <subject>
#
# <body>
#
# <footer>

# --- COMMIT END ---
# Type can be 
#    feat     (new feature)
#    fix      (bug fix)
#    refactor (refactoring production code)
#    style    (formatting, missing semi colons, etc; no code change)
#    docs     (changes to documentation)
#    test     (adding or refactoring tests; no production code change)
#    chore    (updating grunt tasks etc; no production code change)
#    perf     (performance improvements)
#    build    (changes that affect the build system or external dependencies)
#    ci       (changes to CI configuration files and scripts)
#    revert   (reverts a previous commit)
# --------------------
# Scope is optional and can be anything specifying place of the commit change.
# For example: auth, api, database, ui, etc.
# --------------------
# Subject should use imperative mood and tell what you did.
# The subject must not be longer than 50 characters
# The subject must not end with a dot
# --------------------
# Body should explain what and why you have done something.
# Wrap it to 72 characters.
# --------------------
# Footer should contain any BREAKING CHANGES or issues closed.
# --------------------
# Examples:
# feat: add user authentication
# feat(auth): implement JWT token validation
# fix: resolve database connection timeout
# fix(api): handle null pointer exception in user service
# docs: update API documentation
# docs(readme): add installation instructions
# style: format code with black
# refactor: extract user validation logic
# test: add unit tests for user service
# chore: update dependencies
# build: configure Docker for production
# ci: add GitHub Actions workflow
# perf: improve database query performance
# 
# BREAKING CHANGE: remove deprecated API endpoints
# Closes #123
# --------------------