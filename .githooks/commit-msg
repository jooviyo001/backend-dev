#!/bin/sh
# Commit message hook for enforcing conventional commit format

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat $COMMIT_MSG_FILE)

echo "Checking commit message format..."

# Skip merge commits
if echo "$COMMIT_MSG" | grep -q "^Merge "; then
    echo "${GREEN}✓ Merge commit detected, skipping format check${NC}"
    exit 0
fi

# Skip revert commits
if echo "$COMMIT_MSG" | grep -q "^Revert "; then
    echo "${GREEN}✓ Revert commit detected, skipping format check${NC}"
    exit 0
fi

# Skip fixup and squash commits
if echo "$COMMIT_MSG" | grep -q "^\(fixup\|squash\)! "; then
    echo "${GREEN}✓ Fixup/squash commit detected, skipping format check${NC}"
    exit 0
fi

# Get the first line of the commit message
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)

# Check if commit message is empty
if [ -z "$FIRST_LINE" ]; then
    echo "${RED}Error: Commit message cannot be empty${NC}"
    exit 1
fi

# Conventional commit pattern
# Format: type(scope): description
# type: feat, fix, docs, style, refactor, test, chore, etc.
# scope: optional, indicates the scope of the change
# description: brief description of the change
CONVENTIONAL_PATTERN='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,50}$'

# Alternative patterns for common commit types
FEAT_PATTERN='^(feat|feature)(\(.+\))?: .{1,50}$'
FIX_PATTERN='^(fix|bugfix|hotfix)(\(.+\))?: .{1,50}$'
DOCS_PATTERN='^docs(\(.+\))?: .{1,50}$'
STYLE_PATTERN='^style(\(.+\))?: .{1,50}$'
REFACTOR_PATTERN='^refactor(\(.+\))?: .{1,50}$'
TEST_PATTERN='^test(\(.+\))?: .{1,50}$'
CHORE_PATTERN='^chore(\(.+\))?: .{1,50}$'
BUILD_PATTERN='^build(\(.+\))?: .{1,50}$'
CI_PATTERN='^ci(\(.+\))?: .{1,50}$'
PERF_PATTERN='^perf(\(.+\))?: .{1,50}$'

# Check if the commit message follows conventional commit format
if echo "$FIRST_LINE" | grep -qE "$CONVENTIONAL_PATTERN"; then
    echo "${GREEN}✓ Commit message format is valid${NC}"
else
    echo "${RED}Error: Commit message does not follow conventional commit format${NC}"
    echo ""
    echo "${YELLOW}Expected format:${NC}"
    echo "  type(scope): description"
    echo ""
    echo "${YELLOW}Valid types:${NC}"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation only changes"
    echo "  style:    Changes that do not affect the meaning of the code"
    echo "  refactor: A code change that neither fixes a bug nor adds a feature"
    echo "  perf:     A code change that improves performance"
    echo "  test:     Adding missing tests or correcting existing tests"
    echo "  chore:    Changes to the build process or auxiliary tools"
    echo "  build:    Changes that affect the build system or external dependencies"
    echo "  ci:       Changes to CI configuration files and scripts"
    echo "  revert:   Reverts a previous commit"
    echo ""
    echo "${YELLOW}Examples:${NC}"
    echo "  feat: add user authentication"
    echo "  feat(auth): implement JWT token validation"
    echo "  fix: resolve database connection issue"
    echo "  fix(api): handle null pointer exception in user service"
    echo "  docs: update API documentation"
    echo "  docs(readme): add installation instructions"
    echo "  style: format code with black"
    echo "  refactor: extract user validation logic"
    echo "  test: add unit tests for user service"
    echo "  chore: update dependencies"
    echo "  build: configure Docker for production"
    echo "  ci: add GitHub Actions workflow"
    echo ""
    echo "${YELLOW}Current commit message:${NC}"
    echo "  $FIRST_LINE"
    echo ""
    exit 1
fi

# Check commit message length
FIRST_LINE_LENGTH=${#FIRST_LINE}
if [ $FIRST_LINE_LENGTH -gt 72 ]; then
    echo "${YELLOW}Warning: First line is longer than 72 characters ($FIRST_LINE_LENGTH chars)${NC}"
    echo "Consider making it more concise."
fi

# Check for proper capitalization (description should not start with capital letter after colon)
DESCRIPTION=$(echo "$FIRST_LINE" | sed 's/^[^:]*: //')
if echo "$DESCRIPTION" | grep -q '^[A-Z]'; then
    echo "${YELLOW}Warning: Description should start with lowercase letter${NC}"
    echo "Current: $DESCRIPTION"
    echo "Suggested: $(echo "$DESCRIPTION" | sed 's/^./\L&/')" 
fi

# Check for trailing period
if echo "$FIRST_LINE" | grep -q '\.$'; then
    echo "${YELLOW}Warning: First line should not end with a period${NC}"
fi

# Check for imperative mood (common words that indicate non-imperative)
NON_IMPERATIVE_WORDS="added|adding|changed|changing|fixed|fixing|updated|updating|removed|removing|created|creating|deleted|deleting|modified|modifying"
if echo "$DESCRIPTION" | grep -qiE "^($NON_IMPERATIVE_WORDS)"; then
    echo "${YELLOW}Warning: Use imperative mood in description${NC}"
    echo "Instead of 'added', use 'add'"
    echo "Instead of 'fixed', use 'fix'"
    echo "Instead of 'updated', use 'update'"
fi

# Check for body and footer format if present
LINE_COUNT=$(echo "$COMMIT_MSG" | wc -l)
if [ $LINE_COUNT -gt 1 ]; then
    SECOND_LINE=$(echo "$COMMIT_MSG" | sed -n '2p')
    if [ -n "$SECOND_LINE" ]; then
        echo "${YELLOW}Warning: Second line should be empty${NC}"
    fi
    
    # Check for breaking changes
    if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE:"; then
        echo "${GREEN}✓ Breaking change detected and properly formatted${NC}"
    fi
    
    # Check for issue references
    if echo "$COMMIT_MSG" | grep -qE "(closes?|fixes?|resolves?) #[0-9]+"; then
        echo "${GREEN}✓ Issue reference found${NC}"
    fi
fi

# Check for co-authors
if echo "$COMMIT_MSG" | grep -q "Co-authored-by:"; then
    echo "${GREEN}✓ Co-author(s) detected${NC}"
fi

echo "${GREEN}✓ Commit message validation completed${NC}"
exit 0