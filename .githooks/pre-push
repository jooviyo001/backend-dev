#!/bin/sh
# Pre-push hook for final checks before pushing to remote

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}Running pre-push checks...${NC}"

# Get remote and URL
remote="$1"
url="$2"

echo "Pushing to: $remote ($url)"

# Check if we're pushing to main/master branch
local_ref=$(git symbolic-ref HEAD 2>/dev/null || echo "")
branch_name=$(echo $local_ref | sed 's/refs\/heads\///')

if [ "$branch_name" = "main" ] || [ "$branch_name" = "master" ]; then
    echo "${YELLOW}Warning: Pushing to $branch_name branch${NC}"
    echo "Make sure this is intentional and all checks pass."
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if virtual environment is activated
if [ -z "$VIRTUAL_ENV" ] && [ ! -f "venv/bin/activate" ] && [ ! -f ".venv/bin/activate" ]; then
    echo "${YELLOW}Warning: No virtual environment detected${NC}"
fi

# Get list of Python files in the repository
PYTHON_FILES=$(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./env/*" -not -path "./.env/*" -not -path "./build/*" -not -path "./dist/*" -not -path "./.tox/*" -not -path "./.pytest_cache/*" -not -path "./htmlcov/*" | head -20)

if [ -z "$PYTHON_FILES" ]; then
    echo "${GREEN}No Python files found, skipping Python-specific checks${NC}"
    exit 0
fi

echo "Found Python files for checking..."

# Run comprehensive code quality checks
echo "${BLUE}Running code quality checks...${NC}"

# Check Python syntax for all files
echo "Checking Python syntax..."
for file in $PYTHON_FILES; do
    if [ -f "$file" ]; then
        python -m py_compile "$file"
        if [ $? -ne 0 ]; then
            echo "${RED}Error: Python syntax error in $file${NC}"
            exit 1
        fi
    fi
done
echo "${GREEN}✓ Python syntax check passed${NC}"

# Run Black formatter check
if command_exists black; then
    echo "Running Black formatter check..."
    black --check --quiet .
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Code formatting issues found${NC}"
        echo "Run 'black .' to fix formatting issues"
        exit 1
    fi
    echo "${GREEN}✓ Black formatting check passed${NC}"
fi

# Run isort check
if command_exists isort; then
    echo "Running isort import sorting check..."
    isort --check-only --quiet .
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Import sorting issues found${NC}"
        echo "Run 'isort .' to fix import sorting"
        exit 1
    fi
    echo "${GREEN}✓ isort check passed${NC}"
fi

# Run flake8 linting
if command_exists flake8; then
    echo "Running flake8 linting..."
    flake8 .
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Linting issues found${NC}"
        exit 1
    fi
    echo "${GREEN}✓ flake8 linting passed${NC}"
fi

# Run mypy type checking
if command_exists mypy; then
    echo "Running mypy type checking..."
    mypy . --ignore-missing-imports
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Type checking issues found${NC}"
        exit 1
    fi
    echo "${GREEN}✓ mypy type checking passed${NC}"
fi

# Run security checks
echo "${BLUE}Running security checks...${NC}"

# Check for bandit (security linter)
if command_exists bandit; then
    echo "Running bandit security check..."
    bandit -r . -f json -o bandit-report.json -ll || true
    if [ -f "bandit-report.json" ]; then
        ISSUES=$(cat bandit-report.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('results', [])))" 2>/dev/null || echo "0")
        if [ "$ISSUES" -gt "0" ]; then
            echo "${YELLOW}Warning: $ISSUES security issues found${NC}"
            echo "Review bandit-report.json for details"
        else
            echo "${GREEN}✓ No security issues found${NC}"
        fi
        rm -f bandit-report.json
    fi
else
    echo "${YELLOW}Warning: bandit not found. Install with 'pip install bandit'${NC}"
fi

# Check for safety (dependency vulnerability scanner)
if command_exists safety; then
    echo "Running safety dependency check..."
    safety check --json > safety-report.json 2>/dev/null || true
    if [ -f "safety-report.json" ]; then
        VULNS=$(cat safety-report.json | python -c "import sys, json; data=json.load(sys.stdin); print(len(data))" 2>/dev/null || echo "0")
        if [ "$VULNS" -gt "0" ]; then
            echo "${YELLOW}Warning: $VULNS vulnerable dependencies found${NC}"
            echo "Review safety-report.json for details"
        else
            echo "${GREEN}✓ No vulnerable dependencies found${NC}"
        fi
        rm -f safety-report.json
    fi
else
    echo "${YELLOW}Warning: safety not found. Install with 'pip install safety'${NC}"
fi

# Run tests
echo "${BLUE}Running tests...${NC}"

# Check for pytest
if command_exists pytest; then
    echo "Running pytest..."
    if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ] || [ -f "setup.cfg" ] || [ -d "tests" ]; then
        pytest --tb=short -q
        if [ $? -ne 0 ]; then
            echo "${RED}Error: Tests failed${NC}"
            exit 1
        fi
        echo "${GREEN}✓ All tests passed${NC}"
    else
        echo "${YELLOW}No test configuration found, skipping pytest${NC}"
    fi
else
    echo "${YELLOW}pytest not found, skipping tests${NC}"
fi

# Check for unittest
if [ -d "tests" ] && ! command_exists pytest; then
    echo "Running unittest discover..."
    python -m unittest discover -s tests -p "test_*.py" -v
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Tests failed${NC}"
        exit 1
    fi
    echo "${GREEN}✓ All tests passed${NC}"
fi

# Check test coverage (if coverage.py is available)
if command_exists coverage; then
    echo "Checking test coverage..."
    coverage run -m pytest 2>/dev/null || coverage run -m unittest discover 2>/dev/null || true
    COVERAGE_PERCENT=$(coverage report --show-missing | tail -1 | awk '{print $4}' | sed 's/%//' || echo "0")
    if [ -n "$COVERAGE_PERCENT" ] && [ "$COVERAGE_PERCENT" -lt "80" ]; then
        echo "${YELLOW}Warning: Test coverage is ${COVERAGE_PERCENT}% (recommended: 80%+)${NC}"
    elif [ -n "$COVERAGE_PERCENT" ]; then
        echo "${GREEN}✓ Test coverage: ${COVERAGE_PERCENT}%${NC}"
    fi
fi

# Check for large files
echo "${BLUE}Checking for large files...${NC}"
LARGE_FILES=$(find . -type f -size +10M -not -path "./venv/*" -not -path "./.venv/*" -not -path "./env/*" -not -path "./.env/*" -not -path "./node_modules/*" -not -path "./.git/*" | head -10)
if [ -n "$LARGE_FILES" ]; then
    echo "${YELLOW}Warning: Large files detected:${NC}"
    echo "$LARGE_FILES"
    echo "Consider using Git LFS for large files"
fi

# Check for secrets in committed files
echo "${BLUE}Checking for potential secrets...${NC}"
SECRET_PATTERNS="password|secret|token|key|api_key|private_key|access_key|secret_key"
SECRET_FILES=$(git ls-files | xargs grep -l -i "$SECRET_PATTERNS" | grep -v ".git" | head -5 || true)
if [ -n "$SECRET_FILES" ]; then
    echo "${YELLOW}Warning: Files containing potential secrets:${NC}"
    echo "$SECRET_FILES"
    echo "Please review these files to ensure no actual secrets are committed"
fi

# Check commit messages in the push
echo "${BLUE}Validating commit messages in push...${NC}"
z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = $z40 ]; then
        # Handle delete
        continue
    else
        if [ "$remote_sha" = $z40 ]; then
            # New branch, examine all commits
            range="$local_sha"
        else
            # Update to existing branch, examine new commits
            range="$remote_sha..$local_sha"
        fi
        
        # Check each commit message
        git rev-list "$range" | while read commit; do
            msg=$(git log --format=%s -n 1 "$commit")
            # Skip merge commits
            if echo "$msg" | grep -q "^Merge "; then
                continue
            fi
            # Basic format check
            if ! echo "$msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,50}$'; then
                echo "${YELLOW}Warning: Commit $commit has non-conventional message: $msg${NC}"
            fi
        done
    fi
done

# Final security reminder
if [ "$branch_name" = "main" ] || [ "$branch_name" = "master" ]; then
    echo "${YELLOW}Final reminder: You're pushing to $branch_name${NC}"
    echo "Ensure all changes have been reviewed and tested"
fi

echo "${GREEN}✓ All pre-push checks completed successfully!${NC}"
echo "${BLUE}Proceeding with push...${NC}"

exit 0