#!/bin/sh
# Pre-commit hook for code quality checks

set -e

echo "Running pre-commit checks..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No Python files staged for commit."
    exit 0
fi

echo "Checking staged Python files: $STAGED_FILES"

# Check if virtual environment is activated
if [ -z "$VIRTUAL_ENV" ] && [ ! -f "venv/bin/activate" ] && [ ! -f ".venv/bin/activate" ]; then
    echo "Warning: No virtual environment detected. Consider activating one."
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Python syntax
echo "Checking Python syntax..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        python -m py_compile "$file"
        if [ $? -ne 0 ]; then
            echo "Error: Python syntax error in $file"
            exit 1
        fi
    fi
done
echo "✓ Python syntax check passed"

# Run Black formatter (if available)
if command_exists black; then
    echo "Running Black formatter..."
    black --check --diff $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "Error: Code formatting issues found. Run 'black .' to fix them."
        exit 1
    fi
    echo "✓ Black formatting check passed"
else
    echo "Warning: Black not found. Install with 'pip install black'"
fi

# Run isort (if available)
if command_exists isort; then
    echo "Running isort import sorting..."
    isort --check-only --diff $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "Error: Import sorting issues found. Run 'isort .' to fix them."
        exit 1
    fi
    echo "✓ isort check passed"
else
    echo "Warning: isort not found. Install with 'pip install isort'"
fi

# Run flake8 (if available)
if command_exists flake8; then
    echo "Running flake8 linting..."
    flake8 $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "Error: Linting issues found. Fix them before committing."
        exit 1
    fi
    echo "✓ flake8 linting passed"
else
    echo "Warning: flake8 not found. Install with 'pip install flake8'"
fi

# Run mypy type checking (if available)
if command_exists mypy; then
    echo "Running mypy type checking..."
    mypy $STAGED_FILES
    if [ $? -ne 0 ]; then
        echo "Error: Type checking issues found. Fix them before committing."
        exit 1
    fi
    echo "✓ mypy type checking passed"
else
    echo "Warning: mypy not found. Install with 'pip install mypy'"
fi

# Check for common issues
echo "Checking for common issues..."

# Check for debugging statements
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        if grep -n "import pdb\|pdb.set_trace()\|breakpoint()\|print(" "$file"; then
            echo "Error: Debugging statements found in $file. Remove them before committing."
            exit 1
        fi
    fi
done

# Check for TODO/FIXME comments in new code
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Get only the added lines
        ADDED_LINES=$(git diff --cached "$file" | grep "^+" | grep -i "TODO\|FIXME\|XXX\|HACK" || true)
        if [ -n "$ADDED_LINES" ]; then
            echo "Warning: TODO/FIXME comments found in $file:"
            echo "$ADDED_LINES"
            echo "Consider addressing these before committing."
        fi
    fi
done

# Check for secrets/credentials
echo "Checking for potential secrets..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check for common secret patterns
        if grep -i "password\s*=\|secret\s*=\|token\s*=\|key\s*=\|api_key" "$file" | grep -v "#" | grep -v "TODO" | grep -v "FIXME"; then
            echo "Warning: Potential secrets found in $file. Please review."
        fi
    fi
done

# Check file size
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        FILE_SIZE=$(wc -c < "$file")
        if [ $FILE_SIZE -gt 1048576 ]; then  # 1MB
            echo "Warning: Large file detected: $file ($(($FILE_SIZE / 1024))KB)"
            echo "Consider if this file should be tracked by Git LFS."
        fi
    fi
done

echo "✓ All pre-commit checks passed!"
echo "Proceeding with commit..."

exit 0